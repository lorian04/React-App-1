{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lorian Rodriguez\\\\React-App-1\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\n\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems = [\"Home\", \"About\", \"Contact\"]\n  } = _ref;\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // Using a state hook, maintain the current menu items as an array\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  let [filter, setFilter] = useState(\"\");\n\n  // Adds a new menu item to the state\n  let addMenuItem = useCallback(() => {\n    if (newMenuItem.trim() === \"\") return; // prevent adding empty items\n    setMenuItems([newMenuItem, ...menuItems]);\n    setNewMenuItem(\"\"); // clear the input field after adding\n  }, [newMenuItem, menuItems]);\n\n  // Filter the menu items based on the filter text (case-insensitive)\n  const filteredItems = menuItems.filter(item => new RegExp(filter, \"i\").test(item));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sidebar 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value),\n      placeholder: \"New Menu Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","Sidebar","_ref","_s","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","trim","filteredItems","item","RegExp","test","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","id","value","onChange","event","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Lorian Rodriguez/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\r\n\r\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\r\nexport default function Sidebar({ initialMenuItems = [\"Home\", \"About\", \"Contact\"] }) {\r\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\r\n  // Using a state hook, maintain the current menu items as an array\r\n  let [menuItems, setMenuItems] = useState(initialMenuItems)\r\n  let [filter, setFilter] = useState(\"\")\r\n\r\n  // Adds a new menu item to the state\r\n  let addMenuItem = useCallback(() => {\r\n    if (newMenuItem.trim() === \"\") return; // prevent adding empty items\r\n    setMenuItems([newMenuItem, ...menuItems])\r\n    setNewMenuItem(\"\") // clear the input field after adding\r\n  }, [newMenuItem, menuItems])\r\n\r\n  // Filter the menu items based on the filter text (case-insensitive)\r\n  const filteredItems = menuItems.filter(item =>\r\n    new RegExp(filter, \"i\").test(item)\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      {/* Place your header at the top */}\r\n      <h2>Sidebar 1</h2>\r\n      \r\n      {/* Render the list of menu items right after the header */}\r\n      <ul>\r\n        {filteredItems.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Inputs for adding new menu items */}\r\n      <input\r\n        type=\"text\"\r\n        id=\"newMenuItemValue\"\r\n        value={newMenuItem}\r\n        onChange={(event) => setNewMenuItem(event.target.value)}\r\n        placeholder=\"New Menu Item\"\r\n      />\r\n      <br />\r\n      <button onClick={addMenuItem}>\r\n        Add Item\r\n      </button>\r\n      <br />\r\n\r\n      {/* Input for filtering items */}\r\n      <input\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) => setFilter(event.target.value)}\r\n        placeholder=\"Filter by...\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}